通过本项目在目前阶段得到的一些总结

对于没有开发经验的我而言，第一个项目初期对于类与接口如何设计让我找不到方向，不断思考后才最终确定了初步的设计方式，几经删改才有了目前的结构。
本次项目设计让我对于一个项目整理的逻辑关系的紧密性有了一些新的的认识。同时也对于不同的子父类中属性以及方法如何设计，如何考虑他们的继承关系摸索到了一些经验。举例来说，起初我从未想到过单独设计一个工厂类BikeFactory来专门生产自行车对象，我只是想当然的认为只要在需要的地方直接实例化所需的自行车的对象就足够了，但是这大大降低了代码的可读性，让整个方法显得臃肿。
这次经历让我体会到了一个经过不断优化的项目结构对于代码的运行效率还是代码的编写都是十分重要的，并且项目底层的类的属性与方法的设计直接影响到后期在用户界面的工作量，在一次次的调用底层逻辑中，我很难做到思路清晰：我想要调用的是哪个类的对象，我将调用这个对象的什么方法以及用怎样的算法实现该功能。这对于初期对项目理解尚浅的学习者来说是一件比较头晕的事情。好在是经过一些学习较为顺利的完成了这个项目，心中的成就感还是有的，也差不多也相当于我的第一个里程碑，但是在往后仍需再接再厉。


类的设计
最初的Customer类设计未曾考虑过将客户的基本信息以及有关租赁公司所特有的客户信息彻底分离，但是后面设想到了在调用方法时容易混淆，因而将两者的功能分开各自实现各自的功能。

接口的设计：
在电动自行车类ElectricBike实现的接口Charger中定义了两个方法，这两个方法都是为ElectricBike类服务的，加入将方法直接写入该类中，那么这个类的定义开始变得模糊不清，它到底想描述怎样一个对象？同时具有自行车的一些功能和自我充电以及判定电量的功能。在生活中我们不太可能见到这样的物品。在我的理解中，接口和实现接口的类好比充电器和手机，手机不具备自我充电的功能，但是当充电器连接到手机上以后，手机就可以按照他们自己的方式充电了(Type-C接口，安卓接口，苹果接口)。同时，充电器可以为多个手机充电(假设是个一拖三充电器)，它就为每一台手机提供了同样的功能，这是我理解的设计接口的目的。至于别人提到的接口是一种"规范"，我暂时还没有更深的理解，后面的学习中再去深究。